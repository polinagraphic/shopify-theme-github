{% doc %}
  @prompt
    I need a button block with all the default button block settings but need one more function that button will add product directly into cart just like CTA of PDP page. and it should update cart runtime like last time when you make the block it add product to cart i have to refresh to check if the cart is updated or not 
    there will be option to select product which will use to determine which product will go to cart when we click on that button will work on ajex no refresh no redirect will use defult function to add to cart , i need style option like primary or secondery option like the regular buttons in the theme i have already style based on those classes. use same classes from button block.
    
    AS YOU CAN CEHCK I ALREADY TWO BLOCKS FOR TTHIS BUT PROBLEM IS THEY ARE NOT UPDATE CART RUNTIME I HAVE TO REFRESH THE PAGE TO CHECK IF THE CART IS UPDATED OR NOT 
{% enddoc %}
{% assign ai_gen_id = block.id | replace: '_', '' | downcase %}

{% style %}
  .ai-add-to-cart-button-{{ ai_gen_id }} {
    display: inline-block;
    width: 100%;
  }

  .ai-add-to-cart-button-{{ ai_gen_id }} .button {
    width: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 8px;
    position: relative;
    transition: all 0.3s ease;
  }

  .ai-add-to-cart-button-{{ ai_gen_id }} .button:disabled {
    opacity: 0.6;
    cursor: not-allowed;
  }

  .ai-add-to-cart-button-{{ ai_gen_id }} .loading-spinner {
    display: none;
    width: 16px;
    height: 16px;
    border: 2px solid transparent;
    border-top: 2px solid currentColor;
    border-radius: 50%;
    animation: ai-spin-{{ ai_gen_id }} 1s linear infinite;
  }

  .ai-add-to-cart-button-{{ ai_gen_id }} .button.loading .loading-spinner {
    display: block;
  }

  .ai-add-to-cart-button-{{ ai_gen_id }} .button.loading .button-text {
    opacity: 0.7;
  }

  .ai-add-to-cart-button-{{ ai_gen_id }} .success-message {
    display: none;
    color: #008060;
    font-size: 14px;
    margin-top: 8px;
    text-align: center;
  }

  .ai-add-to-cart-button-{{ ai_gen_id }} .error-message {
    display: none;
    color: #D82C0D;
    font-size: 14px;
    margin-top: 8px;
    text-align: center;
  }

  @keyframes ai-spin-{{ ai_gen_id }} {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
  }

  {% if block.settings.full_width %}
    .ai-add-to-cart-button-{{ ai_gen_id }} {
      width: 100%;
    }
  {% else %}
    .ai-add-to-cart-button-{{ ai_gen_id }} {
      width: auto;
      display: inline-block;
    }
    .ai-add-to-cart-button-{{ ai_gen_id }} .button {
      width: auto;
      min-width: 200px;
    }
  {% endif %}
{% endstyle %}

<add-to-cart-button-{{ ai_gen_id }}
  class="ai-add-to-cart-button-{{ ai_gen_id }}"
  {{ block.shopify_attributes }}
  data-product-id="{{ block.settings.product.id }}"
  data-variant-id="{{ block.settings.product.selected_or_first_available_variant.id }}"
  data-quantity="{{ block.settings.quantity }}"
>
  {% if block.settings.product != blank %}
    <button
      type="button"
      class="button {% if block.settings.button_style == 'primary' %}button--primary{% else %}button--secondary{% endif %}"
      data-add-to-cart-button
      {% unless block.settings.product.selected_or_first_available_variant.available %}disabled{% endunless %}
    >
      <span class="loading-spinner"></span>
      <span class="button-text">
        {% if block.settings.product.selected_or_first_available_variant.available %}
          {{ block.settings.button_text }}
        {% else %}
          {{ block.settings.sold_out_text }}
        {% endif %}
      </span>
    </button>
    
    <div class="success-message" data-success-message>
      {{ block.settings.success_message }}
    </div>
    
    <div class="error-message" data-error-message></div>
  {% else %}
    <div style="padding: 20px; text-align: center; color: #666; border: 2px dashed #ddd; border-radius: 8px;">
      <p>Please select a product for this button</p>
    </div>
  {% endif %}
</add-to-cart-button-{{ ai_gen_id }}>

<script>
  (function() {
    class AddToCartButton{{ ai_gen_id }} extends HTMLElement {
      constructor() {
        super();
        this.button = this.querySelector('[data-add-to-cart-button]');
        this.successMessage = this.querySelector('[data-success-message]');
        this.errorMessage = this.querySelector('[data-error-message]');
        this.productId = this.dataset.productId;
        this.variantId = this.dataset.variantId;
        this.quantity = parseInt(this.dataset.quantity) || 1;
      }

      connectedCallback() {
        if (this.button) {
          this.button.addEventListener('click', this.handleAddToCart.bind(this));
        }
      }

      async handleAddToCart(event) {
        event.preventDefault();
        
        if (!this.variantId || this.button.disabled) {
          return;
        }

        this.setLoadingState(true);
        this.hideMessages();

        try {
          const formData = {
            items: [{
              id: this.variantId,
              quantity: this.quantity
            }]
          };

          const response = await fetch('/cart/add.js', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              'Accept': 'application/json'
            },
            body: JSON.stringify(formData)
          });

          if (!response.ok) {
            const errorData = await response.json();
            throw new Error(errorData.description || 'Failed to add item to cart');
          }

          const result = await response.json();
          
          this.showSuccessMessage();
          this.updateCartUI();
          this.triggerCartUpdate();

        } catch (error) {
          console.error('Add to cart error:', error);
          this.showErrorMessage(error.message);
        } finally {
          this.setLoadingState(false);
        }
      }

      setLoadingState(loading) {
        if (loading) {
          this.button.classList.add('loading');
          this.button.disabled = true;
        } else {
          this.button.classList.remove('loading');
          this.button.disabled = false;
        }
      }

      hideMessages() {
        this.successMessage.style.display = 'none';
        this.errorMessage.style.display = 'none';
      }

      showSuccessMessage() {
        this.successMessage.style.display = 'block';
        setTimeout(() => {
          this.successMessage.style.display = 'none';
        }, 3000);
      }

      showErrorMessage(message) {
        this.errorMessage.textContent = message;
        this.errorMessage.style.display = 'block';
        setTimeout(() => {
          this.errorMessage.style.display = 'none';
        }, 5000);
      }

      async updateCartUI() {
        try {
          const cartResponse = await fetch('/cart.js');
          const cart = await cartResponse.json();
          
          document.querySelectorAll('[data-cart-count]').forEach(element => {
            element.textContent = cart.item_count;
          });

          document.querySelectorAll('.cart-count-bubble').forEach(element => {
            element.textContent = cart.item_count;
            if (cart.item_count > 0) {
              element.style.display = 'block';
            }
          });

          const cartDrawer = document.querySelector('cart-drawer');
          if (cartDrawer && typeof cartDrawer.renderContents === 'function') {
            cartDrawer.renderContents(cart);
          }

          const cartItems = document.querySelector('.cart-items');
          if (cartItems) {
            const cartItemsResponse = await fetch('/?section_id=cart-items');
            const cartItemsHtml = await cartItemsResponse.text();
            const parser = new DOMParser();
            const doc = parser.parseFromString(cartItemsHtml, 'text/html');
            const newCartItems = doc.querySelector('.cart-items');
            if (newCartItems) {
              cartItems.innerHTML = newCartItems.innerHTML;
            }
          }

        } catch (error) {
          console.error('Error updating cart UI:', error);
        }
      }

      triggerCartUpdate() {
        document.dispatchEvent(new CustomEvent('cart:updated'));
        
        window.dispatchEvent(new CustomEvent('cart:updated'));
        
        if (window.theme && window.theme.cart) {
          window.theme.cart.updateCartCount();
        }

        const cartDrawer = document.querySelector('cart-drawer');
        if (cartDrawer) {
          if (typeof cartDrawer.open === 'function') {
            cartDrawer.open();
          } else if (typeof cartDrawer.show === 'function') {
            cartDrawer.show();
          }
        }

        const cartIcon = document.querySelector('.header__icon--cart');
        if (cartIcon) {
          cartIcon.click();
        }
      }
    }

    customElements.define('add-to-cart-button-{{ ai_gen_id }}', AddToCartButton{{ ai_gen_id }});
  })();
</script>

{% schema %}
{
  "name": "Add to cart button",
  "tag": null,
  "settings": [
    {
      "type": "header",
      "content": "Product"
    },
    {
      "type": "product",
      "id": "product",
      "label": "Product"
    },
    {
      "type": "range",
      "id": "quantity",
      "min": 1,
      "max": 10,
      "step": 1,
      "label": "Quantity",
      "default": 1
    },
    {
      "type": "header",
      "content": "Button"
    },
    {
      "type": "text",
      "id": "button_text",
      "label": "Button text",
      "default": "Add to cart"
    },
    {
      "type": "text",
      "id": "sold_out_text",
      "label": "Sold out text",
      "default": "Sold out"
    },
    {
      "type": "select",
      "id": "button_style",
      "label": "Button style",
      "options": [
        {
          "value": "primary",
          "label": "Primary"
        },
        {
          "value": "secondary",
          "label": "Secondary"
        }
      ],
      "default": "primary"
    },
    {
      "type": "checkbox",
      "id": "full_width",
      "label": "Full width button",
      "default": true
    },
    {
      "type": "header",
      "content": "Messages"
    },
    {
      "type": "text",
      "id": "success_message",
      "label": "Success message",
      "default": "Added to cart!"
    }
  ],
  "presets": [
    {
      "name": "Add to cart button"
    }
  ]
}
{% endschema %}